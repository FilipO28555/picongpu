/* Copyright 2013-2024 Axel Huebl, Sergei Bastrakov, Julian Lenz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/fields/incidentField/profiles/BaseParam.def"
#include "picongpu/fields/incidentField/profiles/Traits.hpp"


namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            namespace profiles
            {
                namespace defaults
                {
                    struct PlaneWaveParam : public BaseParam
                    {
                        /** Stretch temporal profile by a constant plateau between the up and downramp
                         *  unit: seconds */
                        static constexpr float_64 LASER_NOFOCUS_CONSTANT_SI = 13.34e-15;

                        /** The laser pulse will be initialized after TIME_DELAY_SI half of PULSE_INIT times of the
                         * PULSE_DURATION before and after the plateau unit: none */
                        static constexpr float_64 RAMP_INIT = 20.6146;

                        template<typename My = PlaneWaveParam>
                        static nlohmann::json metadata()
                        {
                            return BaseParam::metadata<My>();
                        }
                    };
                } // namespace defaults

                /** Plane wave laser profile tag
                 *
                 * Defines a plane wave with temporally Gaussian envelope.
                 * Note that the resulting field values will be constant in transversal directions only along the
                 * generating surface.
                 * In order to achieve this constness on the whole domain, additional conditions have to be fulfulled:
                 * no absorber, no incident field sources and zero Huygens surface gap along the transversal
                 * directions.
                 *
                 * @tparam T_Params class parameter to configure the plane wave profile,
                 *                  see members of defaults::PlaneWaveParam for
                 *                  required members
                 */
                template<typename T_Params = defaults::PlaneWaveParam>
                struct PlaneWave;

                template<typename T_Params>
                struct MakePeriodicTransversalHuygensSurfaceContiguous<PlaneWave<T_Params>>
                {
                    static constexpr bool value = true;
                };
            } // namespace profiles
        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
