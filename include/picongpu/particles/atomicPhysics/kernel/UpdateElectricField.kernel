/* Copyright 2024-2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"

#include <pmacc/lockstep/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** update electric field due to field ionization energy use
     *
     * @tparam T_FieldEnergyUseCache FieldEnergyCache type
     * @tparam T_numberAtomicPhysicsIonSpecies specialization template parameter used to prevent compilation of all
     *  atomicPhysics kernels if no atomic physics species is present.
     */
    template<typename T_FieldEnergyUseCache, uint32_t T_numberAtomicPhysicsIonSpecies>
    struct UpdateElectricFieldKernel
    {
        /** call operator
         *
         * called by UpdateElectricField atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param timeRemainingBox deviceDataBox giving access to the time remaining in the atomicPhysics step for each
         *  local superCell
         * @param eFieldBox deviceDataBox giving access to eField values for all local superCells
         * @param fieldEnergyUseCacheBox deviceDataBox giving access to the field energy use cache for each local
         *  superCell
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_TimeRemainingBox,
            typename T_EFieldBox,
            typename T_FieldEnergyUseCacheBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_TimeRemainingBox const timeRemainingBox,
            T_EFieldBox eFieldBox,
            T_FieldEnergyUseCacheBox const fieldEnergyUseCacheBox) const
        {
            auto const superCellIdx = KernelIndexation::getSuperCellIndex(worker, areaMapping);
            auto const superCellFieldIdx
                = KernelIndexation::getSuperCellFieldIndexFromSuperCellIndex(areaMapping, superCellIdx);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);
            if(timeRemaining <= 0._X)
                return;

            T_FieldEnergyUseCache const& eFieldEnergyUseCache = fieldEnergyUseCacheBox(superCellFieldIdx);
            DataSpace<picongpu::simDim> const superCellCellOffset = superCellIdx * picongpu::SuperCellSize::toRT();

            auto forEachCell = pmacc::lockstep::makeForEach<T_FieldEnergyUseCache::numberCells, T_Worker>(worker);
            forEachCell(
                [&worker, &superCellCellOffset, &eFieldBox, &eFieldEnergyUseCache](uint32_t const linearCellIndex)
                {
                    DataSpace<picongpu::simDim> const localCellIndex
                        = pmacc::math::mapToND(picongpu::SuperCellSize::toRT(), static_cast<int>(linearCellIndex));
                    DataSpace<picongpu::simDim> const cellIndex = localCellIndex + superCellCellOffset;

                    // ((sim.unit.mass() * sim.unit.length())/(sim.unit.time()^2 * sim.unit.charge()))^2
                    auto const oldEFieldVector = eFieldBox(cellIndex);
                    auto const eFieldNormSquared = pmacc::math::l2norm2(oldEFieldVector);

                    /// @note zero field also means at most zero energy use
                    if(eFieldNormSquared <= 0)
                        return;

                    // eV * 1 = eV * sim.unit.energy()/sim.unit.energy() = (ev / sim.unit.energy()) * sim.unit.energy()
                    // sim.unit.energy()
                    float_X const eFieldEnergyUse
                        = picongpu::sim.pic.get_eV() * eFieldEnergyUseCache.energyUsed(linearCellIndex);

                    // sim.unit.charge()^2 * sim.unit.time()^2 / (sim.unit.mass() * sim.unit.length()^3)
                    //  * sim.unit.length()^3
                    // = sim.unit.charge()^2 * sim.unit.time()^2 / sim.unit.mass()
                    constexpr float_X eps0HalfTimesCellVolume
                        = (picongpu::sim.pic.getEps0() / 2._X) * picongpu::sim.pic.getCellSize().productOfComponents();

                    /* (((sim.unit.mass() * sim.unit.length())/(sim.unit.time()^2 * sim.unit.charge()))^2
                     *  - sim.unit.energy() / (sim.unit.charge()^2 * sim.unit.time()^2 / sim.unit.mass()))^1/2
                     * = (((sim.unit.mass() * sim.unit.length())/(sim.unit.time()^2 * sim.unit.charge()))^2
                     *  - (sim.unit.mass() * sim.unit.length()^2/sim.unit.time()^2
                     *      / (sim.unit.charge()^2 * sim.unit.time()^2 / sim.unit.mass()))
                     * )^1/2
                     * = (((sim.unit.mass() * sim.unit.length())/(sim.unit.time()^2 * sim.unit.charge()))^2
                     *  - (sim.unit.mass()^2 * sim.unit.length()^2/(sim.unit.time()^4 * sim.unit.charge()^2))
                     * )^1/2
                     * = ((sim.unit.mass()^2 * sim.unit.length()^2)/(sim.unit.time()^4 * sim.unit.charge()^2)
                     *  - (sim.unit.mass()^2 * sim.unit.length()^2/(sim.unit.time()^4 * sim.unit.charge()^2))
                     * )^1/2
                     * = ((sim.unit.mass()^2 * sim.unit.length()^2)/(sim.unit.time()^4 * sim.unit.charge()^2))^1/2
                     * = (sim.unit.mass() * sim.unit.length())/(sim.unit.time()^2 * sim.unit.charge())
                     * = sim.unit.eField()
                     */
                    // sim.unit.eField()
                    float_X const newEFieldNorm
                        = pmacc::math::sqrt(eFieldNormSquared - eFieldEnergyUse / eps0HalfTimesCellVolume);

                    eFieldBox(cellIndex) = oldEFieldVector / pmacc::math::sqrt(eFieldNormSquared) * newEFieldNorm;
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
