/* Copyright 2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

// need simulation.param for normalisation and units, memory.param for SuperCellSize and dim.param for simDim
#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/CheckSetOfAtomicDataBoxes.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/EFieldCache.hpp"
#include "picongpu/particles/atomicPhysics/InstantTransitionRateLimit.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"
#include "picongpu/particles/atomicPhysics/MinimumAndMaximumEFieldNormOfSuperCell.hpp"
#include "picongpu/particles/atomicPhysics/enums/ADKLaserPolarization.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics/enums/TransitionDirection.hpp"
#include "picongpu/particles/atomicPhysics/rateCalculation/BoundFreeFieldTransitionRates.hpp"

#include <pmacc/lockstep/ForEach.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    namespace s_enums = picongpu::particles::atomicPhysics::enums;

    template<typename T_IPDModel, uint32_t T_numberAtomicStates, s_enums::ADKLaserPolarization T_ADKLaserPolarization>
    struct ChooseInstantNonReversibleTransitionKernel
    {
        using VectorIdx = pmacc::DataSpace<picongpu::simDim>;

        /** call operator
         *
         * called by ChooseInstantNonReversibleTransition atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param rngFactoryFloat factory for uniformly distributed random number generator, for float_X [0,1)
         * @param chargeStateBox deviceDataBox giving access to charge state property data
         * @param atomicStateBox deviceDataBox giving access to atomic state property data
         * @param transitionBox deviceDataBox giving access to bound free transition data
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         * @param timeRemainingBox deviceDataBox giving access to the local time remaining of all local superCells
         * @param eFieldBox deviceDataBox giving access to the device local E-Field values
         * @param ionBox deviceDataBox giving access to the ion frames of all device local superCells
         * @param ipdInput everything required by T_IPDModel to calculate the IonizationPotentialDepression,
         *  passed by T_IPDModel::callKernelWithIPDInput
         *
         * @attention assumes that the accepted ion attribute of the species has been reset before the kernel call
         * @attention assumes that the foundUnbound-field has been reset before the kernel call
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_LocalTimeRemainingBox,
            typename T_FoundUnboundBox,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateBoundFreeStartIndexBlockDataBox,
            typename T_AtomicStateBoundFreeNumberTransitionsDataBox,
            typename T_BoundFreeTransitionDataBox,
            typename T_EFieldDataBox,
            typename T_IonBox,
            typename... T_IPDInput>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactoryFloat,
            T_ChargeStateDataDataBox const chargeStateBox,
            T_AtomicStateDataDataBox const atomicStateBox,
            T_AtomicStateBoundFreeStartIndexBlockDataBox const startIndexBox,
            T_AtomicStateBoundFreeNumberTransitionsDataBox const numberTransitionsBox,
            T_BoundFreeTransitionDataBox const transitionBox,
            T_LocalTimeRemainingBox const timeRemainingBox,
            T_FoundUnboundBox foundUnboundBox,
            T_EFieldDataBox const eFieldBox,
            T_IonBox ionBox,
            T_IPDInput const... ipdInput) const
        {
            PMACC_CASSERT(CheckSetOfAtomicDataBoxes::areBoundFreeAndDirection<
                          s_enums::TransitionDirection::upward,
                          T_AtomicStateBoundFreeStartIndexBlockDataBox,
                          T_AtomicStateBoundFreeNumberTransitionsDataBox,
                          T_BoundFreeTransitionDataBox>());

            VectorIdx const superCellIdx = KernelIndexation::getSuperCellIndex(worker, areaMapping);
            VectorIdx const superCellFieldIdx
                = KernelIndexation::getSuperCellFieldIndexFromSuperCellIndex(areaMapping, superCellIdx);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            // create cache for which states to apply kernel to
            PMACC_SMEM(worker, stateHasInstantNonReversibleTransition, memory::Array<bool, T_numberAtomicStates>);
            // unit: unit_eField
            PMACC_SMEM(worker, minEFieldNormSuperCell, typename T_EFieldDataBox::ValueType::type);
            // unit: unit_eField
            PMACC_SMEM(worker, maxEFieldNormSuperCell, typename T_EFieldDataBox::ValueType::type);

            // init shared memory
            //!@{
            /// @todo write variant using the eField cache to find minimum and maximum using, Brian Marre, 2024
            MinimumAndMaximumEFieldNormOfSuperCell::find(
                worker,
                superCellIdx,
                eFieldBox,
                minEFieldNormSuperCell,
                maxEFieldNormSuperCell);
            auto forEachAtomicState = pmacc::lockstep::makeForEach<T_numberAtomicStates>(worker);
            forEachAtomicState([&stateHasInstantNonReversibleTransition](uint32_t const stateCollectionIndex)
                               { stateHasInstantNonReversibleTransition[stateCollectionIndex] = false; });
            worker.sync();
            //!@}

            // check presence of atomic states
            forEachLocalIonBoxEntry(
                [&stateHasInstantNonReversibleTransition](T_Worker const& worker, auto& ion)
                {
                    uint32_t const stateCollectionIndex = ion[atomicStateCollectionIndex_];
                    stateHasInstantNonReversibleTransition[stateCollectionIndex] = true;
                });
            worker.sync();

            float_X const ionizationPotentialDepression
                = T_IPDModel::template calculateIPD<T_ChargeStateDataDataBox::atomicNumber>(
                    superCellFieldIdx,
                    ipdInput...);

            // mask states with maximum total loss rate below rate limit
            forEachAtomicState(
                [&ionizationPotentialDepression,
                 &minEFieldNormSuperCell,
                 &maxEFieldNormSuperCell,
                 &stateHasInstantNonReversibleTransition,
                 &numberTransitionsBox,
                 &startIndexBox,
                 &chargeStateBox,
                 &atomicStateBox,
                 &transitionBox](uint32_t const stateCollectionIndex)
                {
                    // check if atomic state present at all
                    if(!stateHasInstantNonReversibleTransition[stateCollectionIndex])
                        return;

                    uint32_t const numberTransitionsUp
                        = numberTransitionsBox.numberOfTransitionsUp(stateCollectionIndex);
                    uint32_t const offset = startIndexBox.startIndexBlockTransitionsUp(stateCollectionIndex);

                    // unit: 1/unit_time
                    float_64 sumRateTransitions = 0.0;
                    for(uint32_t transitionID = u32(0u); transitionID < numberTransitionsUp; ++transitionID)
                    {
                        uint32_t const transitionCollectionIndex = offset + transitionID;

                        // unit: 1/unit_time
                        sumRateTransitions
                            += atomicPhysics::rateCalculation::BoundFreeFieldTransitionRates<T_ADKLaserPolarization>::
                                template maximumRateADKFieldIonization<float_64>(
                                    minEFieldNormSuperCell,
                                    maxEFieldNormSuperCell,
                                    ionizationPotentialDepression,
                                    transitionCollectionIndex,
                                    chargeStateBox,
                                    atomicStateBox,
                                    transitionBox);
                    }

                    // unit: 1/unit_time
                    constexpr auto rateLimit = InstantTransitionRateLimit::get<float_64>();

                    if(sumRateTransitions <= rateLimit)
                        stateHasInstantNonReversibleTransition[stateCollectionIndex] = false;
                });
            // no need to snyc threads since we will sync after filling eField cache anyway

            auto eFieldCache = EFieldCache::get<__COUNTER__>(worker, superCellIdx, eFieldBox);
            worker.sync();

            auto rngGeneratorFloat = rngFactoryFloat(worker, superCellFieldIdx);

            bool foundInstantTransitionIon = false;
            // choose instant transition for each particle in state with total transition rate above limit
            forEachLocalIonBoxEntry(
                [&stateHasInstantNonReversibleTransition,
                 &foundInstantTransitionIon,
                 &ionizationPotentialDepression,
                 &eFieldCache,
                 &rngGeneratorFloat,
                 &numberTransitionsBox,
                 &startIndexBox,
                 &chargeStateBox,
                 &atomicStateBox,
                 &transitionBox](T_Worker const& worker, auto& ion)
                {
                    auto const stateCollectionIndex = ion[atomicStateCollectionIndex_];
                    auto const linearCellIndex = ion[localCellIdx_];

                    if(!stateHasInstantNonReversibleTransition[stateCollectionIndex])
                        return;

                    VectorIdx const localCellIndex
                        = pmacc::math::mapToND(picongpu::SuperCellSize::toRT(), static_cast<int>(linearCellIndex));

                    // unit: unit_eField
                    float_X const eFieldNormCell = pmacc::math::l2norm(eFieldCache(localCellIndex));

                    uint32_t const numberTransitions
                        = numberTransitionsBox.numberOfTransitionsUp(stateCollectionIndex);
                    uint32_t const startIndexTransitionBlock
                        = startIndexBox.startIndexBlockTransitionsUp(stateCollectionIndex);

                    float_X const r = rngGeneratorFloat();

                    float_64 particleTotalTransitionRate = 0.;
                    for(uint32_t transitionID = 0u; transitionID < numberTransitions; ++transitionID)
                    {
                        uint32_t const transitionCollectionIndex = transitionID + startIndexTransitionBlock;

                        auto const transitionRate
                            = atomicPhysics::rateCalculation::BoundFreeFieldTransitionRates<T_ADKLaserPolarization>::
                                template rateADKFieldIonization<float_64>(
                                    eFieldNormCell,
                                    ionizationPotentialDepression,
                                    transitionCollectionIndex,
                                    chargeStateBox,
                                    atomicStateBox,
                                    transitionBox);

                        if constexpr(picongpu::atomicPhysics::debug::kernel::chooseInstantTransition::
                                         CHECK_FOR_INFINITE_FIELD_IONIZATION_RATES)
                            if(transitionRate < 0._X)
                                printf("atomicPhysics ERROR: encountered infinite transition rate in "
                                       "ChooseInstantTransition kernel");

                        // unit: 1/unit_time
                        particleTotalTransitionRate += transitionRate;
                    }

                    constexpr auto rateLimit = InstantTransitionRateLimit::get<float_64>();
                    bool const particleTotalLossRateBelowRateLimit = (particleTotalTransitionRate <= rateLimit);

                    if(particleTotalLossRateBelowRateLimit)
                        return;

                    foundInstantTransitionIon = true;

                    // choose transition for instant transition ion
                    float_X cumSum = 0._X;
                    for(uint32_t transitionID = 0u; transitionID < numberTransitions; ++transitionID)
                    {
                        uint32_t const transitionCollectionIndex = transitionID + startIndexTransitionBlock;

                        // unit: 1/unit_time
                        cumSum += static_cast<float_X>(
                            atomicPhysics::rateCalculation::BoundFreeFieldTransitionRates<T_ADKLaserPolarization>::
                                template rateADKFieldIonization<float_64>(
                                    eFieldNormCell,
                                    ionizationPotentialDepression,
                                    transitionCollectionIndex,
                                    chargeStateBox,
                                    atomicStateBox,
                                    transitionBox)
                            / particleTotalTransitionRate);

                        // inclusive limit, to make sure that r==1 is assigned a transition
                        if(r <= cumSum)
                        {
                            // found chosen transition
                            ion[processClass_] = u8(s_enums::ProcessClass::fieldIonization);
                            ion[transitionIndex_] = transitionCollectionIndex;
                            /* field ionizations are not bin based therefore we do not set a bin, and old values are
                             * ignored */
                            // we set the accepted flag to allow easy resource use accounting in a later kernel call
                            ion[accepted_] = true;
                            return;
                        }
                    }
                });

            alpaka::atomicOr(
                worker.getAcc(),
                &foundUnboundBox(superCellFieldIdx),
                u32(foundInstantTransitionIon),
                ::alpaka::hierarchy::Threads{});
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
