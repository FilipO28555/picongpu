/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"

#include <pmacc/lockstep/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** reset deltaWeight entry of all electron histogram bins to 0
     *
     * @tparam T_Histogram histogram type
     * @tparam T_numberAtomicPhysicsIonSpecies specialization template parameter only used to prevent compilation of
     * all atomicPhysics kernels if no atomic physics species is present.
     */
    template<typename T_Histogram, uint32_t T_numberAtomicPhysicsIonSpecies>
    struct ResetDeltaWeightElectronHistogramKernel
    {
        /** call operator
         *
         * called by ResetSharedRessources atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param timeRemainingBox deviceDataBox giving access to the local time remaining of all local super
         * cells
         * @param histogramBox deviceDataBox giving access to localHistograms for all local superCells
         */
        template<typename T_Worker, typename T_AreaMapping, typename T_TimeRemainingBox, typename T_HistogramDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_TimeRemainingBox const timeRemainingBox,
            T_HistogramDataBox histogramBox) const
        {
            auto const superCellFieldIdx = KernelIndexation::getSuperCellFieldIndex(worker, areaMapping);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);

            bool const superCellAlreadyFinished = timeRemaining <= 0._X;
            if(superCellAlreadyFinished)
                return;

            auto forEachBin = pmacc::lockstep::makeForEach<T_Histogram::numberBins, T_Worker>(worker);
            T_Histogram& histogram = histogramBox(superCellFieldIdx);
            forEachBin([&worker, &histogram](uint32_t const binIndex) { histogram.setDeltaWeight(binIndex, 0._X); });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
