/* Copyright 2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/CheckSetOfAtomicDataBoxes.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"
#include "picongpu/particles/atomicPhysics/SetAtomicState.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics/enums/TransitionDirection.hpp"
#include "picongpu/particles/atomicPhysics/ionizationPotentialDepression/PassIPDInputs.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    namespace s_enums = picongpu::particles::atomicPhysics::enums;

    /** update atomic state of ions according to their accepted transition, do nothing if the ion did not accept an
     *  transition
     *
     * @note This kernel differs from the RecordChanges kernel by not assuming that all ions accepted a transition.
     * @note This kernel is intended for updating the ion atomic state after accepting an instant transition.
     */
    template<s_enums::ProcessClass T_ProcessClass>
    struct UpdateIonAtomicStateKernel
    {
        using VectorIdx = pmacc::DataSpace<picongpu::simDim>;

        /** call operator
         *
         * called by UpdateIons atomicPhysics sub-stage for each active processClass
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param timeRemainingBox deviceDataBox giving access to the local time remaining of all local super
         * cells
         * @param ionBox deviceDataBox giving access to the particle frames of all local superCells
         * @param atomicStateBox deviceDataBox giving access to atomic state property data
         * @param transitionBox deviceDataBox giving access to transition property data,
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_IonBox,
            typename T_AtomicStateDataBox,
            typename T_TransitionDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const timeRemainingBox,
            T_IonBox ionBox,
            T_AtomicStateDataBox const atomicStateBox,
            T_TransitionDataBox const transitionBox) const
        {
            PMACC_CASSERT(CheckSetOfAtomicDataBoxes::
                              transitionDataBoxMatchesProcessClass<T_ProcessClass, T_TransitionDataBox>());

            VectorIdx const superCellIdx = KernelIndexation::getSuperCellIndex(worker, areaMapping);
            VectorIdx const superCellFieldIdx
                = KernelIndexation::getSuperCellFieldIndexFromSuperCellIndex(areaMapping, superCellIdx);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            bool const superCellAlreadyFinished = (timeRemaining <= 0._X);
            bool const superCellHasIons = forEachLocalIonBoxEntry.hasParticles();
            if(superCellAlreadyFinished || !superCellHasIons)
                return;

            forEachLocalIonBoxEntry(
                [&atomicStateBox, &transitionBox](T_Worker const& worker, auto& ion)
                {
                    bool const accepted = ion[accepted_];
                    uint32_t const transitionIndex = ion[transitionIndex_];
                    uint8_t const processClass = ion[processClass_];

                    bool const acceptedProcessClassTransition = (processClass != u8(T_ProcessClass));

                    // skip ions without accepted instant transition
                    if(!accepted || !acceptedProcessClassTransition)
                        return;

                    uint32_t const newAtomicStateCollectionIndex
                        = transitionBox.upperStateCollectionIndex(transitionIndex);

                    picongpu::particles::atomicPhysics::SetAtomicState::op(
                        atomicStateBox,
                        ion,
                        newAtomicStateCollectionIndex);
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
