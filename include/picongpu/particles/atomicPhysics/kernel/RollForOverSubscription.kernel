/* Copyright 2023-2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"
#include "picongpu/particles/atomicPhysics/debug/PrintAtomicPhysicsIonToConsole.hpp"
#include "picongpu/particles/atomicPhysics/enums/IsProcess.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics/localHelperFields/RejectionProbabilityCache_Bin.hpp"
#include "picongpu/particles/atomicPhysics/localHelperFields/RejectionProbabilityCache_Cell.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** roll for over subscription kernel
     *
     * check for each macro ion with an accepted a transition, whether:
     *  - the accepted transition is a collisional transition and whether the interaction bin is over subscribed
     * or
     *  - the accepted transition is a field based transition and whether the macro ions' cell is over subscribed
     * If yes roll for rejection of the transition.
     *
     * Rejection probability stored for each bin in rejectionProbabilityCache_Bin
     *  and for each cell in rejectionProbabilityCache_Cell.
     */
    struct RollForOverSubscriptionKernel
    {
        /** call operator
         *
         * called by RollForSubscription atomic physics sub-stage
         *
         * @param worker object containing the device and block information,
         *  passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory random number generator factory
         * @param timeRemainingBox deviceDataBox giving access to the local time remaining of all local superCells
         * @param sharedResourceOverSubscribedBox deviceDataBox giving access to the shared resources oversubscribed
         *  flag of all local superCells
         * @param ionBox deviceDataBox giving access to the particle frames of all local superCells
         * @param rejectionProbabilityCacheBinBox deviceDataBox giving access to the rejectionProbabilityCache_Bin
         *  of each local superCell
         * @param rejectionProbabilityCacheCellBox deviceDataBox giving access to the rejectionProbabilityCache_Cell
         *  of each local superCell
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_TimeRemainingBox,
            typename T_SharedResourceOverSubscribedBox,
            typename T_IonBox,
            typename T_RejectionProbabilityCacheBinDataBox,
            typename T_RejectionProbabilityCacheCellDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            /// const?, @todo Brian Marre, 2023
            T_RngGeneratorFactoryFloat rngFactory,
            T_TimeRemainingBox const timeRemainingBox,
            T_SharedResourceOverSubscribedBox const sharedResourceOverSubscribedBox,
            T_IonBox ionBox,
            T_RejectionProbabilityCacheBinDataBox rejectionProbabilityCacheBinBox,
            T_RejectionProbabilityCacheCellDataBox rejectionProbabilityCacheCellBox) const
        {
            auto const superCellIdx = KernelIndexation::getSuperCellIndex(worker, areaMapping);
            auto const superCellFieldIdx
                = KernelIndexation::getSuperCellFieldIndexFromSuperCellIndex(areaMapping, superCellIdx);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);
            bool const sharedResourcesOverSubscribed
                = static_cast<bool>(sharedResourceOverSubscribedBox(superCellFieldIdx));
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // superCell of worker?
            bool const alreadyFinished = (timeRemaining <= 0._X);
            bool const noOverSubscription = !sharedResourcesOverSubscribed;
            bool const noIons = !forEachLocalIonBoxEntry.hasParticles();
            if(alreadyFinished || noOverSubscription || noIons)
                return;

            /// @todo cache in shared memory, Brian Marre, 2024
            using RejectionProbabilityCache_Bin = typename T_RejectionProbabilityCacheBinDataBox::ValueType;
            RejectionProbabilityCache_Bin const& rejectionProbabilityCache_Bin
                = rejectionProbabilityCacheBinBox(superCellFieldIdx);

            using RejectionProbabilityCache_Cell = typename T_RejectionProbabilityCacheCellDataBox::ValueType;
            RejectionProbabilityCache_Cell const& rejectionProbabilityCache_Cell
                = rejectionProbabilityCacheCellBox(superCellFieldIdx);

            auto rngGenerator = rngFactory(worker, superCellFieldIdx);

            // try to reject each accepted macro-ion, which takes from an oversubscribed bin
            forEachLocalIonBoxEntry(
                [&](T_Worker const& worker, auto& ion)
                {
                    uint8_t const processClass = ion[processClass_];
                    [[maybe_unused]] uint32_t const cellIndex = ion[localCellIdx_];
                    [[maybe_unused]] uint32_t const binIndex = ion[binIndex_];
                    bool const accepted = ion[accepted_];

                    namespace enums = picongpu::particles::atomicPhysics::enums;

                    bool const usesElectronHistogramWeight
                        = enums::IsProcess<enums::ProcessClassGroup::electronicCollisional>::check(processClass);
                    bool const usesElectricFieldEnergy
                        = enums::IsProcess<enums::ProcessClassGroup::electricFieldBased>::check(processClass);

                    if(!(usesElectronHistogramWeight || usesElectricFieldEnergy) || !accepted)
                        return;

                    /** @attention if assumes that usesElectricFieldEnergy and usesElectronHistogramWeight are mutually
                     *    exclusive */
                    float_X rejectionProbability;
                    if(usesElectronHistogramWeight)
                    {
                        rejectionProbability = rejectionProbabilityCache_Bin.getRejectionProbabilityBin(binIndex);
                    }
                    else
                    {
                        /// @note (usesElectricFieldEnergy == true)
                        rejectionProbability = rejectionProbabilityCache_Cell.getRejectionProbabilityCell(cellIndex);
                    }
                    bool const usesOverSubscribedResource = (rejectionProbability > 0._X);

                    if constexpr(picongpu::atomicPhysics::debug::kernel::rollForOverSubscription::
                                     PRINT_DEBUG_TO_CONSOLE)
                    {
                        if(accepted && usesOverSubscribedResource)
                        {
                            picongpu::particles::atomicPhysics::debug::PrintAtomicPhysicsIonToConsole{}(
                                worker.getAcc(),
                                ion);
                        }
                    }

                    if(!usesOverSubscribedResource)
                        return;

                    if(rngGenerator() < rejectionProbability)
                    {
                        // reject transition
                        ion[accepted_] = false;
                    }
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
