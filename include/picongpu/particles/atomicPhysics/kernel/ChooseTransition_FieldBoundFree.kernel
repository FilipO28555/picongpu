/* Copyright 2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/CheckForInvalidChooseTransitionGroup.hpp"
#include "picongpu/particles/atomicPhysics/CheckSetOfAtomicDataBoxes.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"
#include "picongpu/particles/atomicPhysics/enums/ChooseTransitionGroup.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics/enums/TransitionDirection.hpp"
#include "picongpu/particles/atomicPhysics/rateCalculation/BoundFreeFieldTransitionRates.hpp"

#include <pmacc/dimensions/DataSpace.hpp>
#include <pmacc/dimensions/SuperCellDescription.hpp>
#include <pmacc/lockstep/lockstep.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/math/operation/Assign.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>
#include <pmacc/memory/boxes/DataBox.hpp>
#include <pmacc/memory/boxes/SharedBox.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>
#include <limits>

namespace picongpu::particles::atomicPhysics::kernel
{
    namespace s_enums = picongpu::particles::atomicPhysics::enums;

    /** choose specific transition from previously selected transitionType for bound-free field transitions
     *
     * A transition is selected by rolling a random number r, [0,1) and comparing it to the cumulative sums of the
     *  normalized rates of the physical transitions of the transitionType.
     * The transition corresponding to the interval containing r is the chosen and accepted.
     *
     * @tparam T_ADKLaserPolarization polarization direction to use in the ADK rate calculation
     * @tparam T_EField type of EField
     * @tparam T_n_max number of levels of atomic states in input
     * @tparam T_IPDModel ionization potential depression model to use
     */
    template<
        s_enums::ADKLaserPolarization T_ADKLaserPolarization,
        typename T_EField,
        uint8_t T_n_max,
        typename T_IPDModel>
    struct ChooseTransitionKernel_FieldBoundFree
    {
        using VectorIdx = pmacc::DataSpace<picongpu::simDim>;

    private:
        //! @attention this is a collective method and implicitly synchronises
        template<typename BlockDescription, typename T_Worker, typename T_EFieldBox, typename T_EfieldCache>
        HDINLINE void initEFieldCache(
            T_Worker const& worker,
            VectorIdx const& superCellCellOffset,
            T_EFieldBox const eFieldBox,
            T_EfieldCache& eFieldCache) const
        {
            auto fieldEBlockToCache = eFieldBox.shift(superCellCellOffset);

            pmacc::math::operation::Assign assign;
            auto collective = makeThreadCollective<BlockDescription>();

            collective(worker, assign, eFieldCache, fieldEBlockToCache);
            worker.sync();
        }

    public:
        /** call operator
         *
         * called by ChooseTransition atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactoryFloat factory for uniformly distributed random number generator, for float_X [0,1)
         * @param chargeStateDataDataBox deviceDataBox giving access to charge state property data
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state property data
         * @param boundFreeTransitionDataBox deviceDataBox giving access to bound free transition data
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         * @param timeRemainingBox deviceDataBox giving access to the local time remaining of all local super
         * cells
         * @param eFieldBox deviceDataBox giving access to the device local E-Field values
         * @param ionBox deviceDataBox giving access to the ion frames of all local superCells
         * @param ipdInput everything required by T_IPDModel to calculate the IonizationPotentialDepression,
         *  passed by T_IPDModel::callKernelWithIPDInput
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateBoundFreeNumberTransitionsDataBox,
            typename T_AtomicStateBoundFreeStartIndexBlockDataBox,
            typename T_BoundFreeTransitionDataBox,
            typename T_TimeRemainingBox,
            typename T_EFieldBox,
            typename T_RateCacheBox,
            typename T_IonBox,
            typename... T_IPDInput>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactoryFloat,
            T_ChargeStateDataDataBox const chargeStateDataDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateBoundFreeNumberTransitionsDataBox const numberTransitionsBox,
            T_AtomicStateBoundFreeStartIndexBlockDataBox const startIndexBox,
            T_BoundFreeTransitionDataBox const transitionDataBox,
            T_TimeRemainingBox const timeRemainingBox,
            T_EFieldBox eFieldBox,
            T_RateCacheBox const rateCacheBox,
            T_IonBox ionBox,
            T_IPDInput const... ipdInput) const
        {
            PMACC_CASSERT(CheckSetOfAtomicDataBoxes::areBoundFreeAndDirection<
                          s_enums::TransitionDirection::upward,
                          T_AtomicStateBoundFreeStartIndexBlockDataBox,
                          T_AtomicStateBoundFreeNumberTransitionsDataBox,
                          T_BoundFreeTransitionDataBox>());

            VectorIdx const superCellIdx = KernelIndexation::getSuperCellIndex(worker, areaMapping);
            VectorIdx const superCellFieldIdx
                = KernelIndexation::getSuperCellFieldIndex(worker, areaMapping, superCellIdx);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            using SuperCellBlock = pmacc::SuperCellDescription<typename picongpu::SuperCellSize>;
            VectorIdx const superCellSize = picongpu::SuperCellSize::toRT();
            /// @note cache is unique for kernel call by id and dataType, and thereby shared between workers
            auto eFieldCache = CachedBox::create</* Id */ 0u, typename T_EField::ValueType>(worker, SuperCellBlock());
            VectorIdx const superCellCellOffset = superCellIdx * superCellSize;
            initEFieldCache<SuperCellBlock>(worker, superCellCellOffset, eFieldBox, eFieldCache);

            auto rngGeneratorFloat = rngFactoryFloat(worker, superCellFieldIdx);
            auto& rateCache = rateCacheBox(superCellFieldIdx);

            float_X const ionizationPotentialDepression
                = T_IPDModel::template calculateIPD<T_ChargeStateDataDataBox::atomicNumber>(
                    superCellFieldIdx,
                    ipdInput...);

            forEachLocalIonBoxEntry(
                [&](T_Worker const& worker, auto& ion)
                {
                    // debug
                    checkForInvalidChooseTransitionGroup(ion);

                    // reject already accepted macro-ions and other transitionTypes
                    bool const selectedFieldBoundFreeUpwardTransition
                        = (ion[transitionIndex_] == u32(s_enums::ChooseTransitionGroup::fieldBoundFreeUpward));
                    if(ion[accepted_] || !selectedFieldBoundFreeUpwardTransition)
                        return;

                    auto const atomicStateCollectionIndex = ion[atomicStateCollectionIndex_];

                    VectorIdx const localCellIndex
                        = pmacc::math::mapToND(superCellSize, static_cast<int>(ion[localCellIdx_]));
                    // sim.unit.eField()
                    float_X const eFieldNormCell = pmacc::math::l2norm(eFieldCache(localCellIndex));

                    // get possible transitions' collectionIndices
                    uint32_t const numberTransitions
                        = numberTransitionsBox.numberOfTransitionsUp(atomicStateCollectionIndex);
                    uint32_t const startIndexTransitionBlock
                        = startIndexBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex);

                    // get random number
                    float_X const r = rngGeneratorFloat();

                    float_X cumSum = 0._X;
                    for(uint32_t transitionID = 0u; transitionID < numberTransitions; ++transitionID)
                    {
                        uint32_t const transitionCollectionIndex = transitionID + startIndexTransitionBlock;

                        // 1/picongpu::sim.unit.time()
                        float_X const rateTransition = atomicPhysics::rateCalculation::
                            BoundFreeFieldTransitionRates<T_ADKLaserPolarization>::template rateADKFieldIonization(
                                eFieldNormCell,
                                ionizationPotentialDepression,
                                transitionCollectionIndex,
                                chargeStateDataDataBox,
                                atomicStateDataDataBox,
                                transitionDataBox);

                        cumSum += rateTransition
                            / rateCache.rate(
                                u32(s_enums::ChooseTransitionGroup::fieldBoundFreeUpward),
                                atomicStateCollectionIndex);

                        // inclusive limit, to make sure that r==1 is assigned a transition
                        if(r <= cumSum)
                        {
                            // found chosen transition
                            ion[processClass_] = u8(s_enums::ProcessClass::fieldIonization);
                            ion[transitionIndex_] = transitionCollectionIndex;
                            // field ionizations are not bin based therefore we do not set a bin, and old values are
                            // ignored
                            ion[accepted_] = true;
                            return;
                        }
                    }

                    /* ADK rate for particle cell E-Field below superCell maximum ADK rate
                     * -> need to do noChange Transition for correct division into other channels. */
                    ion[processClass_] = u8(s_enums::ProcessClass::noChange);
                    // no need to set ion[transitionIndex_] since already uniquely known by processClass = noChange
                    // no-change transitions are not bin based therefore we don't set a bin, old values are ignored
                    ion[accepted_] = true;
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
