/* Copyright 2023-2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"
#include "picongpu/particles/atomicPhysics/kernel/CalculateRejectionProbability.hpp"
#include "picongpu/particles/atomicPhysics/localHelperFields/RejectionProbabilityCache_Bin.hpp"
#include "picongpu/particles/atomicPhysics/localHelperFields/RejectionProbabilityCache_Cell.hpp"

#include <pmacc/lockstep/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** check all bins and cells for overSubscription
     *
     * checks each (superCell cell)/(local histogram bin) for (fieldEnergyUse > fieldEnergy)/(deltaWeight > weight0),
     *  if yes mark cell/bin as oversubscribed and stores rejection probability in rejection probability cache
     *
     * @tparam T_Histogram histogram type
     * @tparam T_FieldEnergyUseCache field energy use cache type
     * @tparam T_numberAtomicPhysicsIonSpecies specialization template parameter used to prevent compilation of all
     *  atomicPhysics kernels if no atomic physics species is present.
     */
    template<typename T_Histogram, typename T_FieldEnergyUseCache, uint32_t T_numberAtomicPhysicsIonSpecies>
    struct CheckForOverSubscriptionKernel
    {
        /** call operator
         *
         * called by CheckForOverSubscription atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory factory for uniformly distributed random number generator
         * @param histogramBox deviceDataBox giving access to local electron histograms for all local superCells
         * @param eFieldBox deviceDataBox giving access to eField values for all local superCells
         * @param fieldEnergyUseCacheBox deviceDataBox giving access to the field energy use cache for each local
         * superCell
         * @param sharedResourcesOverSubscribedBox deviceDataBox giving access to the local shared resources over
         *  subscription flag for each local superCell
         * @param rejectionProbabilityCacheCellBox deviceDataBox giving access to the rejectionProbabilityCache_Cell
         *  for all local superCells
         * @param rejectionProbabilityCacheBinBox deviceDataBox giving access to the rejectionProbabilityCache_Bin
         *  for all local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_HistogramDataBox,
            typename T_EFieldBox,
            typename T_FieldEnergyUseCacheBox,
            typename T_SharedRessourcesOverSubscribedBox,
            typename T_RejectionProbabilityCacheBinDataBox,
            typename T_RejectionProbabilityCacheCellDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const timeRemainingBox,
            T_HistogramDataBox const histogramBox,
            T_EFieldBox const eFieldBox,
            T_FieldEnergyUseCacheBox const fieldEnergyUseCacheBox,
            T_SharedRessourcesOverSubscribedBox sharedResourcesOverSubscribedBox,
            T_RejectionProbabilityCacheBinDataBox rejectionProbabilityCacheBinBox,
            T_RejectionProbabilityCacheCellDataBox rejectionProbabilityCacheCellBox) const
        {
            auto const superCellIdx = KernelIndexation::getSuperCellIndex(worker, areaMapping);
            auto const superCellFieldIdx
                = KernelIndexation::getSuperCellFieldIndexFromSuperCellIndex(areaMapping, superCellIdx);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);
            if(timeRemaining <= 0._X)
                return;

            particles::atomicPhysics::localHelperFields::RejectionProbabilityCache_Cell<
                T_FieldEnergyUseCache::numberCells>& rejectionProbabilityCacheCell
                = rejectionProbabilityCacheCellBox(superCellFieldIdx);
            particles::atomicPhysics::localHelperFields::RejectionProbabilityCache_Bin<
                T_HistogramDataBox::ValueType::numberBins>& rejectionProbabilityCacheBin
                = rejectionProbabilityCacheBinBox(superCellFieldIdx);

            bool sharedResourcesOverSubscribed = false;

            T_HistogramDataBox::ValueType const& histogram = histogramBox(superCellFieldIdx);
            auto forEachBin
                = pmacc::lockstep::makeForEach<T_HistogramDataBox::ValueType::numberBins, T_Worker>(worker);
            forEachBin(
                [&histogram, &rejectionProbabilityCacheBin, &sharedResourcesOverSubscribed](uint32_t const binIndex)
                {
                    CalculateRejectionProbability::ofHistogramBin(
                        binIndex,
                        histogram,
                        rejectionProbabilityCacheBin,
                        sharedResourcesOverSubscribed);
                });

            T_FieldEnergyUseCache const& eFieldEnergyUseCache = fieldEnergyUseCacheBox(superCellFieldIdx);
            DataSpace<picongpu::simDim> const superCellCellOffset = superCellIdx * picongpu::SuperCellSize::toRT();
            auto forEachCell = pmacc::lockstep::makeForEach<T_FieldEnergyUseCache::numberCells, T_Worker>(worker);
            forEachCell(
                [&superCellCellOffset,
                 &eFieldBox,
                 &eFieldEnergyUseCache,
                 &rejectionProbabilityCacheCell,
                 &sharedResourcesOverSubscribed](uint32_t const linearCellIndex)
                {
                    CalculateRejectionProbability::ofCell(
                        linearCellIndex,
                        superCellCellOffset,
                        eFieldBox,
                        eFieldEnergyUseCache,
                        rejectionProbabilityCacheCell,
                        sharedResourcesOverSubscribed);
                });

            uint32_t& flagField = sharedResourcesOverSubscribedBox(superCellFieldIdx);
            // write out flag setting to device memory
            alpaka::atomicOr(
                worker.getAcc(),
                &flagField,
                u32(sharedResourcesOverSubscribed),
                ::alpaka::hierarchy::Threads{});
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
