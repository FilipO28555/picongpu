/* Copyright 2023-2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"
#include "picongpu/particles/atomicPhysics/localHelperFields/RejectionProbabilityCache.hpp"

#include <pmacc/lockstep/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** check all bins and cells for overSubscription
     *
     * checks each (superCell cell)/(local histogram bin) for (deltaWeight > weight0)/(fieldEnergyUse > fieldEnergy),
     *  if yes mark cell/bin as oversubscribed and store rejection probability in rejection probability cache
     *
     * @tparam T_Histogram histogram type
     * @tparam T_FieldEnergyUseCache field energy use cache type
     * @tparam T_numberAtomicPhysicsIonSpecies specialization template parameter used to prevent compilation of all
     *  atomicPhysics kernels if no atomic physics species is present.
     */
    template<typename T_Histogram, typename T_FieldEnergyUseCache, uint32_t T_numberAtomicPhysicsIonSpecies>
    struct CheckForOverSubscriptionKernel
    {
        /** call operator
         *
         * called by CheckForOverSubscription atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory factory for uniformly distributed random number generator
         * @param histogramBox deviceDataBox giving access to local electron histograms for all local superCells
         * @param eFieldBox deviceDataBox giving access to eField values for all local superCells
         * @param fieldEnergyUseCacheBox deviceDataBox giving access to the field energy use cache for each local
         * superCell
         * @param sharedResourcesOverSubscribedBox deviceDataBox giving access to the local shared resources over
         *  subscription switch for each local superCell
         * @param rejectionProbabilityCacheBox deviceDataBox giving access to localRejectionProbabilityCache for
         *  all local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_LocalHistogramDataBox,
            typename T_EFieldBox,
            typename T_FieldEnergyUseCacheBox,
            typename T_SharedRessourcesOverSubscribedBox,
            typename T_RejectionProbabilityCacheDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const timeRemainingBox,
            T_LocalHistogramDataBox const histogramBox,
            T_EFieldBox const eFieldBox,
            T_FieldEnergyUseCacheBox const fieldEnergyUseCacheBox,
            T_SharedRessourcesOverSubscribedBox sharedResourcesOverSubscribedBox,
            T_RejectionProbabilityCacheDataBox rejectionProbabilityCacheBox) const
        {
            auto const superCellIdx = KernelIndexation::getSuperCellIndex(worker, areaMapping);
            auto const superCellFieldIdx = KernelIndexation::getSuperCellFieldIndex(worker, areaMapping, superCellIdx);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);
            if(timeRemaining <= 0._X)
                return;

            particles::atomicPhysics::localHelperFields::RejectionProbabilityCache<
                T_Histogram::numberBins,
                T_FieldEnergyUseCache::numberCells>& rejectionProbabilityCache
                = rejectionProbabilityCacheBox(superCellFieldIdx);

            bool sharedResourcesOverSubscribed = false;

            T_Histogram const& histogram = histogramBox(superCellFieldIdx);
            auto forEachBin = pmacc::lockstep::makeForEach<T_Histogram::numberBins, T_Worker>(worker);
            forEachBin(
                [&worker, &histogram, &sharedResourcesOverSubscribed, &rejectionProbabilityCache](
                    uint32_t const binIndex)
                {
                    float_X const weight0 = histogram.getBinWeight0(binIndex);
                    float_X const deltaWeight = histogram.getBinDeltaWeight(binIndex);

                    float_X rejectionProbability;

                    if(weight0 < deltaWeight)
                    {
                        // bin is oversubscribed by suggested changes

                        // calculate rejection probability
                        rejectionProbability = math::max(
                            // proportion of weight we want to reject
                            (deltaWeight - weight0) / deltaWeight,
                            // but at least one average one macro ion should be rejected
                            sim.unit.typicalNumParticlesPerMacroParticle() / deltaWeight);

                        // set flag that we found at least one over subscribed resource
                        sharedResourcesOverSubscribed = true;
                    }
                    else
                        rejectionProbability = -1._X;

                    rejectionProbabilityCache.setBin(binIndex, rejectionProbability);
                });


            T_FieldEnergyUseCache const& eFieldEnergyUseCache = fieldEnergyUseCacheBox(superCellFieldIdx);
            DataSpace<picongpu::simDim> const superCellCellOffset = superCellIdx * picongpu::SuperCellSize::toRT();
            auto forEachCell = pmacc::lockstep::makeForEach<T_FieldEnergyUseCache::numberCells, T_Worker>(worker);
            forEachCell(
                [&worker,
                 &superCellCellOffset,
                 &eFieldBox,
                 &eFieldEnergyUseCache,
                 &sharedResourcesOverSubscribed,
                 &rejectionProbabilityCache](uint32_t const linearCellIndex)
                {
                    DataSpace<picongpu::simDim> const localCellIndex
                        = pmacc::math::mapToND(picongpu::SuperCellSize::toRT(), static_cast<int>(linearCellIndex));
                    DataSpace<picongpu::simDim> const cellIndex = localCellIndex + superCellCellOffset;

                    // sim.unit.charge()^2 * sim.unit.time()^2 / (sim.unit.mass() * sim.unit.length()^3)
                    //  * sim.unit.length()^3
                    // = sim.unit.charge()^2 * sim.unit.time()^2 / sim.unit.mass()
                    constexpr float_X eps0HalfTimesCellVolume
                        = (picongpu::sim.pic.getEps0() / 2._X) * picongpu::sim.pic.getCellSize().productOfComponents();

                    // sim.unit.charge()^2 * sim.unit.time()^2 / sim.unit.mass()
                    //  * ((sim.unit.mass() * sim.unit.length())/(sim.unit.time()^2 * sim.unit.charge()))^2
                    // = sim.unit.charge()^2 * sim.unit.time()^2 * sim.unit.mass()^2 * sim.unit.length()^2
                    //  / (sim.unit.mass() * sim.unit.time()^4 * sim.unit.charge()^2)
                    // = sim.unit.mass() * sim.unit.length()^2/ (sim.unit.time()^2 * sim.unit.length())
                    // sim.unit.energy()
                    auto const eFieldEnergy = eps0HalfTimesCellVolume * pmacc::math::l2norm2(eFieldBox(cellIndex));

                    // eV * 1 = eV * sim.unit.energy()/sim.unit.energy() = (ev / sim.unit.energy()) * sim.unit.energy()
                    // sim.unit.energy()
                    auto const eFieldEnergyUse
                        = picongpu::sim.pic.get_eV() * eFieldEnergyUseCache.energyUsed(linearCellIndex);

                    float_X rejectionProbability;

                    if(eFieldEnergyUse > eFieldEnergy)
                    {
                        // cell is oversubscribed by suggested changes

                        // calculate rejection probability
                        rejectionProbability = math::max(
                            // proportion of weight we want to reject
                            (eFieldEnergyUse - eFieldEnergy) / eFieldEnergyUse,
                            // but approximately at least one average one macro ion per cell should be rejected
                            1 / sim.getTypicalNumParticlesPerCell());

                        // set flag that we found at least one over subscribed resource
                        sharedResourcesOverSubscribed = true;
                    }
                    else
                        rejectionProbability = -1._X;

                    rejectionProbabilityCache.setCell(linearCellIndex, rejectionProbability);
                });

            uint32_t& flagField = sharedResourcesOverSubscribedBox(superCellFieldIdx);
            // write out flag setting to device memory
            alpaka::atomicOr(
                worker.getAcc(),
                &flagField,
                u32(sharedResourcesOverSubscribed),
                ::alpaka::hierarchy::Threads{});
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
