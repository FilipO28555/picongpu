/* Copyright 2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/DeltaEnergyTransition.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"
#include "picongpu/particles/atomicPhysics/enums/IsProcess.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClassGroup.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** record used electric field energy from a cell for each accepted transition
     *
     * @tparam T_IPDModel ionization potential depression model to use
     */
    template<typename T_IPDModel>
    struct RecordSuggestedFieldEnergyUseKernel
    {
        /** call operator
         *
         * called by RecordSuggestedFieldEnergyUsed atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param chargeStateBox deviceDataBox giving access to charge state property data
         * @param atomicStateBox deviceDataBox giving access to atomic state property data
         * @param boundFreeTransitionBox deviceDataBox giving access to bound free transition data
         * @param timeRemainingBox deviceDataBox giving access to the local time remaining of all local superCells
         * @param fieldEnergyUseCacheBox deviceDataBox giving access to the local field energy use of all cells of all
         *  local superCells
         * @param ionBox deviceDataBox giving access to the particle frames of all local superCells
         * @param ipdInput everything required by T_IPDModel to calculate the IonizationPotentialDepression,
         *  passed by T_IPDModel::callKernelWithIPDInput
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_BoundFreeTransitionDataBox,
            typename T_LocalTimeRemainingBox,
            typename T_FieldEnergyUseCacheBox,
            typename T_IonBox,
            typename... T_IPDInput>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_ChargeStateDataDataBox const chargeStateBox,
            T_AtomicStateDataDataBox const atomicStateBox,
            T_BoundFreeTransitionDataBox const boundFreeTransitionBox,
            T_LocalTimeRemainingBox const timeRemainingBox,
            T_FieldEnergyUseCacheBox fieldEnergyUseCacheBox,
            T_IonBox const ionBox,
            T_IPDInput const... ipdInput) const
        {
            auto const superCellIdx = KernelIndexation::getSuperCellIndex(worker, areaMapping);
            auto const superCellFieldIdx
                = KernelIndexation::getSuperCellFieldIndexFromSuperCellIndex(areaMapping, superCellIdx);

            auto const timeRemaining = timeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if no particles or superCell already finished
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            auto& fieldEnergyUseCache = fieldEnergyUseCacheBox(superCellFieldIdx);

            float_X const ionizationPotentialDepression
                = T_IPDModel::template calculateIPD<T_ChargeStateDataDataBox::atomicNumber>(
                    superCellFieldIdx,
                    ipdInput...);

            forEachLocalIonBoxEntry(
                [&](T_Worker const& worker, auto& ion)
                {
                    if(!ion[accepted_])
                        return;

                    auto const weight = ion[weighting_];
                    uint32_t const linearCellIdx = ion[localCellIdx_];
                    uint32_t const transitionCollectionIndex = ion[transitionIndex_];

                    // eV, weighted
                    float_X const energyUsed = DeltaEnergyTransition::get(
                                                   transitionCollectionIndex,
                                                   atomicStateBox,
                                                   boundFreeTransitionBox,
                                                   ionizationPotentialDepression,
                                                   chargeStateBox)
                        * weight;

                    // uses atomics
                    fieldEnergyUseCache.add(worker, linearCellIdx, energyUsed);
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
