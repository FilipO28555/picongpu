/* Copyright 2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file implements calculation of ionization potential depression(IPD) input variables from sum fields
 *
 * @attention assumes that fillSumFieldKernel has been completed for all IPD ion and electron species previously!
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/KernelIndexation.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::ionizationPotentialDepression::kernel
{
    /** calculate IPD input kernel for the Stewart-Pyatt IPD model
     *
     * @attention assumes that the sumFields have been reset previously
     *
     * called by IPD calculation stage, calculates local superCell temperature, debye length and
     *
     * @tparam T_numberAtomicPhysicsIonSpecies specialization template parameter used to prevent compilation of all
     *  atomicPhysics kernels if no atomic physics species is present.
     */
    template<uint32_t T_numberAtomicPhysicsIonSpecies>
    struct CalculateIPDInputKernel
    {
        /** call operator
         *
         * called by calculateIPD atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param timeRemainingBox deviceDataBox containing local atomicPhysics step
         *  time remaining for every superCell
         * @param sumWeightAllNormalizedBox deviceDataBox giving access to the sum of weights of macro particles for
         * all local superCells
         * @param sumTemperatureTermBox deviceDataBox giving access to the sum of the temperature
         *  functional of all macro particles for all local superCells
         * @param sumWeightElectronNormalizedBox deviceDataBox giving access to the sum of weights of electron macro
         *  particles for all local superCells
         * @param sumChargeNumberBox deviceDataBox giving access to the weighted sum of the charge number of ion
         *  macro particles for all local superCells
         * @param sumChargeNumberSquaredBox deviceDataBox giving access to the weighted sum of the charge number
         *  squared of ion macro particles for all local superCells
         * @param temperatureEnergyBox deviceDataBox giving access to the local temperature * k_Boltzman for all
         *  local superCells, in sim.unit.mass() * sim.unit.length()^2 / sim.unit.time()^2, not weighted
         * @param zStarBox deviceDataBox giving access to the local z^Star value, = average(q^2) / average(q),
         *  for all local superCells, unitless, not weighted
         * @param debyeLengthBox deviceDataBox giving access to the local debye length for all local superCells,
         *  sim.unit.length(), not weighted
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingDataBox,
            typename T_SumWeightAllFieldDataBox,
            typename T_SumTemperatureFunctionalFieldDataBox,
            typename T_SumWeightElectronFieldBox,
            typename T_SumChargeNumberIonsFieldDataBox,
            typename T_SumChargeNumberSquaredIonsFieldDataBox,
            typename T_LocalTemperatureFieldDataBox,
            typename T_ZStarFieldDataBox,
            typename T_LocaDebyeLengthFieldDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingDataBox const timeRemainingBox,
            T_SumWeightAllFieldDataBox const sumWeightAllNormalizedBox,
            T_SumTemperatureFunctionalFieldDataBox const sumTemperatureTermBox,
            T_SumWeightElectronFieldBox const sumWeightElectronNormalizedBox,
            T_SumChargeNumberIonsFieldDataBox const sumChargeNumberBox,
            T_SumChargeNumberSquaredIonsFieldDataBox const sumChargeNumberSquaredBox,
            T_LocalTemperatureFieldDataBox temperatureEnergyBox,
            T_ZStarFieldDataBox zStarBox,
            T_LocaDebyeLengthFieldDataBox debyeLengthBox) const
        {
            auto const superCellFieldIdx = KernelIndexation::getSuperCellFieldIndex(worker, areaMapping);

            // sim.unit.time()
            float_X const timeRemaining = timeRemainingBox(superCellFieldIdx);

            // end kernel if superCell already finished
            if(timeRemaining <= 0._X)
                return;

            // localSumFieldValues
            //!@{
            // sim.unit.energy() * weight / sim.unit.typicalNumParticlesPerMacroParticle()
            float_X const sumTemperatureTerm = sumTemperatureTermBox(superCellFieldIdx);
            // weight / sim.unit.typicalNumParticlesPerMacroParticle()
            float_X const sumWeightAllNormalized = sumWeightAllNormalizedBox(superCellFieldIdx);
            // weight / sim.unit.typicalNumParticlesPerMacroParticle()
            float_X const sumWeightElectronNormalized = sumWeightElectronNormalizedBox(superCellFieldIdx);

            // unitless * weight / sim.unit.typicalNumParticlesPerMacroParticle()
            float_X const sumChargeNumber = sumChargeNumberBox(superCellFieldIdx);
            // unitless * weight / sim.unit.typicalNumParticlesPerMacroParticle()
            float_X const sumChargeNumberSquared = sumChargeNumberSquaredBox(superCellFieldIdx);
            //!@}

            const auto onlyMaster = lockstep::makeMaster(worker);

            /// @todo use forEachSuperCell instead of letting workers wait, Brian Marre, 2024
            onlyMaster(
                [&sumTemperatureTerm,
                 &sumWeightAllNormalized,
                 &sumWeightElectronNormalized,
                 &sumChargeNumber,
                 &sumChargeNumberSquared,
                 &temperatureEnergyBox,
                 &zStarBox,
                 &debyeLengthBox,
                 &superCellFieldIdx]()
                {
                    /* unit: (unitless * weight / typicalNumParticlesPerMacroParticle)
                     *  / (unitless * weight / typicalNumParticlesPerMacroParticle) = unitless */
                    zStarBox(superCellFieldIdx) = sumChargeNumberSquared / sumChargeNumber;

                    // eV / unit_energy
                    constexpr float_X eV = sim.pic.get_eV();

                    /* unit: unit_energy * weight / typicalNumParticlesPerMacroParticle
                     *  / (weight / typicalNumParticlesPerMacroParticle) = unit_energy
                     *
                     * k_Boltzman * Temperature, energy equivalent to the local temperature */
                    float_X const temperatureEnergy_PIC = sumTemperatureTerm / sumWeightAllNormalized;

                    // (eV / unit_energy) * unit_energy = eV
                    temperatureEnergyBox(superCellFieldIdx) = eV * temperatureEnergy_PIC;

                    /** @note in case simDim = DIM2, we assumes sim.pic.getCellSize().productOfComponents() =
                     * sim.pic.getCellSize().x() * sim.pic.getCellSize().z() * (system size)
                     *
                     * unit: sim.unit.length()^3 */
                    constexpr float_X volumeSuperCell = pmacc::math::CT::volume<picongpu::SuperCellSize>::type::value
                        * picongpu::sim.pic.getCellSize().productOfComponents();

                    /* unit: (unit_charge^2 / (unit_energy * unit_length)) * unit_length^3 / unit_charge^2
                     *      / typicalNumParticlesPerMacroParticle)
                     * = unit_length^2 / unit_energy / typicalNumParticlesPerMacroParticle
                     */
                    constexpr float_X constFactorDebyeLength = picongpu::sim.pic.getEps0() * volumeSuperCell
                        / pmacc::math::cPow(picongpu::sim.pic.getElectronCharge(), 2u)
                        / sim.unit.typicalNumParticlesPerMacroParticle();

                    /** @note debyeLength = sqrt(eps_0 * k_B*T / sum_species(numberDensity_species * charge_species^2))
                     *
                     * unit:  sqrt(unit_length^2 / unit_energy / typicalNumParticlesPerMacroParticle
                     *  * unit_energy / (1/typicalNumParticlesPerMacroParticle)) = unit_length */
                    debyeLengthBox(superCellFieldIdx) = math::sqrt(
                        constFactorDebyeLength * temperatureEnergy_PIC
                        / (sumChargeNumberSquared + sumWeightElectronNormalized));
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::ionizationPotentialDepression::kernel
