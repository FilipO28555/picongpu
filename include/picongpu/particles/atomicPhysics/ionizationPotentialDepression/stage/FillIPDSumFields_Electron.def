/* Copyright 2024-2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file FillIPDSumFields ionization potential depression(IPD) sub-stage for an electron species
 *
 * implements filling of IPD sum fields from reduction of all macro particles of the specified **electron** species
 */

#pragma once

#include "picongpu/defines.hpp"

#include <string>

namespace picongpu::particles::atomicPhysics::ionizationPotentialDepression::stage
{
    //! short hand for IPD namespace
    namespace s_IPD = picongpu::particles::atomicPhysics::ionizationPotentialDepression;

    /** IPD sub-stage for filling the sum fields required for calculating the IPD inputs for an ion species
     *
     * @tparam T_ElectronSpecies electron species to fill into sum fields
     * @tparam T_TemperatureFunctional functional to use for temperature calculation
     */
    template<typename T_ElectronSpecies, typename T_TemperatureFunctional>
    struct FillIPDSumFields_Electron
    {
        //! call of kernel for every superCell
        HINLINE void operator()([[maybe_unused]] picongpu::MappingDesc const mappingDesc) const;
    };
} // namespace picongpu::particles::atomicPhysics::ionizationPotentialDepression::stage
